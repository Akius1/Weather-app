{"version":3,"sources":["components/AppSpinner.jsx","utils/constructUrl.js","components/Card.jsx","components/Barchart.jsx","components/CardContainer.jsx","utils/helpers.js","components/BottomView.jsx","components/TopView.jsx","utils/api.js","pages/WeatherInfoPage.jsx","hooks/useWeatherInfo.jsx","styles/GlobalStyles.js","styles/theme.js","App.js","reportWebVitals.js","index.js"],"names":["AppLoader","position","top","left","bottom","right","background","backdropFilter","zIndex","display","justifyContent","alignItems","color","size","constructUrl","url","params","key","pattern","RegExp","replace","toString","WeatherCard","data","handleSelect","active","borderWidth","borderColor","height","w","borderRadius","p","my","shadow","onClick","flexDirection","cursor","_hover","backgroundColor","backgroundImage","fontSize","title","variant","colorScheme","py","mt","textTransform","weather","description","src","icon","boxSize","sum","reduce","acc","curr","main","temp","Math","round","length","calculateAverageTemp","localStorage","getItem","Barchart","h","minW","minH","ResponsiveContainer","width","BarChart","margin","CartesianGrid","strokeDasharray","XAxis","dataKey","stroke","YAxis","Tooltip","Legend","Bar","fill","breakPoints","itemsToShow","itemsToScroll","WeatherCardContainer","useState","weatherSegmentData","setWeatherSegmentData","selectedCard","setSelectedCard","useMediaQuery","isMobile","useEffect","map","item","time","dayjs","dt_txt","format","renderArrow","props","type","undefined","as","IoChevronBackSharp","disabled","isEdge","alignSelf","IoChevronForwardSharp","pagination","showEmptySlots","isRTL","index","handleSelectWeatherCard","JSON","stringify","monthName","variants","hidden","y","visible","transition","duration","MotionBox","motion","Box","Bottom","reload","sections","setSections","result","groupBy","days","property","section","push","initial","animate","bg","borderTopRadius","padding","pt","pos","overflowY","VscRefresh","Top","fontWeight","name","routes","getErrorMsg","error","response","message","getWeatherInfo","coord","unit","a","axios","get","units","includes","status","Error","Temp","WeatherInfo","toast","useToast","setCoord","tempUnit","setTempUnit","useQuery","enabled","useWeatherInfo","isLoading","isFetching","isError","refetch","temperature_unit","navigator","geolocation","getCurrentPosition","lat","coords","latitude","lon","longitude","isClosable","setItem","direction","onChange","value","m","mb","city","list","GlobalStyles","css","theme","extendTheme","colors","fonts","body","heading","components","queryClient","QueryClient","App","client","styles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dce05e8e.chunk.js","sourcesContent":["import { Box, Spinner } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nexport const AppLoader = () => {\n  return (\n    <Box\n      position=\"absolute\"\n      top=\"0\"\n      left=\"0\"\n      bottom=\"0\"\n      right=\"0\"\n      background=\"rgba(0,0,0,0.5)\"\n      backdropFilter=\"blur(5px)\"\n      zIndex=\"100\"\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <Spinner color=\"white\" size=\"xl\" />\n    </Box>\n  );\n};\n","\n\nexport const constructUrl = (\n  url,\n  params\n) => {\n  for (let key in params) {\n    const pattern = new RegExp(`:${key}[?]?`);\n    url = url.replace(pattern, params[key].toString());\n  }\n  return url;\n};\n\n","import { Flex, Heading, Image, Text, Tag } from \"@chakra-ui/react\";\nimport React from \"react\";\n// import { Temp } from \"../types/TempEnums\";\nimport { constructUrl } from \"../utils/constructUrl\";\n\nconst iconUrl = \"http://openweathermap.org/img/wn/:icon@4x.png\";\n\nexport const WeatherCard = ({ data, handleSelect, active }) => {\n  const Temp = {\n    Fahrenheit: \"imperial\",\n    Celsius: \"metric\",\n  };\n  const calculateAverageTemp = () => {\n    const sum = data.data.reduce((acc, curr) => acc + curr.main.temp, 0);\n    return Math.round(sum / data.data.length);\n  };\n  return (\n    <Flex\n      borderWidth=\"1px\"\n      borderColor=\"gray.400\"\n      height=\"30vh\"\n      w={[\"90%\", \"80%\"]}\n      borderRadius=\"md\"\n      p=\"2\"\n      my=\"5\"\n      shadow={active ? \"lg\" : \"sm\"}\n      onClick={handleSelect}\n      flexDirection=\"column\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      cursor=\"pointer\"\n      _hover={{\n        shadow: \"lg\",\n      }}\n      data-testid=\"weather-card\"\n      // backgroundColor=\"linear-gradient(140deg,#8fe0ff,#75b4e3)\"\n      backgroundColor=\"#bdd4e7\"\nbackgroundImage= \"linear-gradient(315deg, #bdd4e7 0%, #8693ab 74%)\"\n\n    >\n      <Heading fontSize=\"sm\" color=\"#000\">\n        {data.title}\n      </Heading>\n      <Tag\n        variant=\"subtle\"\n        colorScheme=\"blackAlpha\"\n        borderRadius=\"full\"\n        size=\"sm\"\n        py=\"0\"\n        mt=\"1\"\n        fontSize=\"sm\"\n        textTransform=\"capitalize\"\n        color=\"#000\"\n      >\n        {data.data[0].weather[0].description}\n      </Tag>\n      <Image\n        src={constructUrl(iconUrl, { icon: data.data[0].weather[0].icon })}\n        boxSize=\"100px\"\n      />\n      <Flex>\n        <Text color=\"#000\">\n          {calculateAverageTemp()}\n          <sup>o</sup>\n          {localStorage.getItem(\"temperature_unit\") &&\n          localStorage.getItem(\"temperature_unit\") === Temp.Celsius\n            ? \"C\"\n            : \"F\"}\n        </Text>\n      </Flex>\n    </Flex>\n  );\n};\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\n\n\nexport const Barchart = ({\n  data,\n  w = \"100%\",\n  h = \"100%\",\n}) => {\n  return (\n    <Box minW={w} minH={h} data-testid=\"chart\">\n      <ResponsiveContainer width={w} height={h}>\n        <BarChart\n          width={500}\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"time\" stroke=\"#fff\" />\n          <YAxis stroke=\"#fff\" />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"temp\" fill=\"#8fe0ff\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IconButton, Icon, Flex, useMediaQuery } from \"@chakra-ui/react\";\nimport Carousel, { RenderArrowProps } from \"react-elastic-carousel\";\nimport { IoChevronBackSharp, IoChevronForwardSharp } from \"react-icons/io5\";\nimport { WeatherCard } from \"./Card\";\nimport dayjs from \"dayjs\";\nimport { Barchart } from \"./Barchart\";\n\nconst breakPoints = [\n  { width: 1, itemsToShow: 1 },\n  { width: 550, itemsToShow: 2, itemsToScroll: 2 },\n  { width: 768, itemsToShow: 3 },\n];\n\n\n\nexport const WeatherCardContainer = ({ data }) => {\n  const [weatherSegmentData, setWeatherSegmentData] =\n    useState();\n  const [selectedCard, setSelectedCard] = useState();\n  const [isMobile] = useMediaQuery(\"(max-width: 665px)\");\n\n  const handleSelectWeatherCard = (index) => {\n    setSelectedCard(index);\n    const weatherSegmentData = data[index].data.map(\n      (item) => ({\n        time: dayjs(item.dt_txt).format(\"ha\"),\n        temp: item.main.temp,\n      })\n    );\n\n    setWeatherSegmentData(weatherSegmentData);\n  };\n\n  useEffect(() => {\n    if (data && selectedCard) {\n      const weatherSegmentData = data[\n        selectedCard\n      ]?.data?.map((item) => ({\n        time: dayjs(item.dt_txt).format(\"ha\"),\n        temp: item.main.temp,\n      }));\n\n      setWeatherSegmentData(weatherSegmentData);\n    }\n  }, [data]);\n\n  const renderArrow = (props) => {\n    return props.type === \"PREV\" ? (\n      <IconButton\n        onClick={() => {\n          props.onClick();\n          isMobile && setWeatherSegmentData(undefined);\n        }}\n        aria-label=\"arrow\"\n        icon={<Icon as={IoChevronBackSharp} />}\n        disabled={props.isEdge}\n        borderRadius=\"full\"\n        size=\"sm\"\n        alignSelf=\"center\"\n      />\n    ) : (\n      <IconButton\n        onClick={() => {\n          props.onClick();\n          isMobile && setWeatherSegmentData(undefined);\n        }}\n        aria-label=\"arrow\"\n        icon={<Icon as={IoChevronForwardSharp} />}\n        disabled={props.isEdge}\n        borderRadius=\"full\"\n        size=\"sm\"\n        alignSelf=\"center\"\n      />\n    );\n  };\n  return (\n    <Flex\n      flexDirection=\"column\"\n      alignItems=\"center\"\n    >\n      <Carousel\n        renderArrow={renderArrow}\n        pagination={false}\n        showEmptySlots={false}\n        isRTL={false}\n        breakPoints={breakPoints}\n      >\n        {data.map((item, index) => (\n          <WeatherCard\n            data={item}\n            key={JSON.stringify(item.data[0].main)}\n            handleSelect={() => handleSelectWeatherCard(index)}\n            active={selectedCard === index}\n          />\n        ))}\n      </Carousel>\n\n      {weatherSegmentData && (\n        <Flex mt=\"14\" justifyContent=\"center\" h=\"400px\" w={[\"100%\", \"500px\"]}>\n          <Barchart data={weatherSegmentData} />\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n","import dayjs from \"dayjs\";\nimport fetchMock from \"fetch-mock\";\n\nexport const monthName = (item) => {\n  return dayjs(item.dt_txt, \"YYYY-MM-DD\").format(\"MMMM D, YYYY\");\n};\n\nexport function mockAPI() {\n  fetchMock.mock(\"https://api.example.com/items\", {\n    Test: \"Test\",\n    Test1: \"Test1\",\n  });\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Box, IconButton, Icon, Spacer } from \"@chakra-ui/react\";\nimport { motion } from \"framer-motion\";\nimport { WeatherCardContainer } from \"./CardContainer\";\nimport { VscRefresh } from \"react-icons/vsc\";\nimport { monthName } from \"../utils/helpers\";\nimport groupBy from \"lodash.groupby\";\n\nconst variants = {\n  hidden: {\n    y: \"100vh\",\n  },\n  visible: {\n    y: 0,\n    transition: {\n      duration: 1,\n    },\n  },\n};\n\nconst MotionBox = motion(Box);\n\nexport const Bottom = ({ reload, data }) => {\n  const [sections, setSections] = useState([]);\n\n  useEffect(() => {\n    if (data) {\n      const result = groupBy(data, monthName);\n\n      const days = [];\n      for (const property in result) {\n        let section = { title: property, data: result[property] };\n        days.push(section);\n      }\n\n      setSections(days);\n    }\n  }, [data]);\n\n  return (\n    <MotionBox\n      variants={variants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      height=\"80vh\"\n      bg=\"white\"\n      borderTopRadius=\"3xl\"\n      padding=\"4\"\n      pt=\"7\"\n      pos=\"relative\"\n      overflowY=\"scroll\"\n      // background=\"#75b4e3\"\n      background=\"linear-gradient(120deg,rgba(255,255,255,0.3),transparent)\"\n      backdropFilter=\"blur(30px)\"\n    >\n      <IconButton\n        onClick={reload}\n        position=\"absolute\"\n        top=\"0\"\n        left=\"0\"\n        variant=\"ghost\"\n        aria-label=\"refresh\"\n        icon={<Icon as={VscRefresh} w=\"6\" h=\"6\" />}\n        size=\"lg\"\n        borderRadius=\"full\"\n      />\n\n      <Spacer height=\"10\" />\n      <WeatherCardContainer data={sections} />\n    </MotionBox>\n  );\n};\n","import { Flex, Heading } from \"@chakra-ui/react\";\nimport React from \"react\";\n\n\n\nexport const Top = ({ data }) => {\n  return (\n    <Flex h=\"20vh\" justifyContent=\"center\" alignItems=\"center\">\n      <Heading color=\"white\" size=\"md\" fontWeight=\"medium\">\n        {data?.name}\n      </Heading>\n    </Flex>\n  );\n};\n","import axios from \"axios\";\n\n\nconst routes = {\n  weatherInfo:\n    \"http://api.openweathermap.org/data/2.5/forecast?appid=ad27d6b2697fceb255030535b25de60c\",\n};\n\n\nconst DEFAULT_ERROR_MESSAGE = \"An error occurred, please try again\";\n\n\nconst getErrorMsg = (error) => {\n    if (error) {\n      if (error.response?.data) {\n        if (error.response.data.message) {\n          return error.response.data.message;\n        }\n      }\n    }\n  \n    return DEFAULT_ERROR_MESSAGE;\n  };\n\nexport const getWeatherInfo = async (coord, unit)=> {\n  \n  try {\n    const response = await axios.get(routes.weatherInfo, {\n      params: {\n        ...coord,\n        units: unit\n      },\n    });\n\n    if ([200].includes(response.status)) {\n      return response.data;\n    } else {\n      throw new Error();\n    }\n  } catch (error) {\n    let message = getErrorMsg(error);\n    throw new Error(message);\n  }\n};\n","import {\n  Flex,\n  useToast,\n  Radio,\n  RadioGroup,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { AppLoader } from \"../components/AppSpinner\";\nimport { Bottom } from \"../components/BottomView\";\nimport { Top } from \"../components/TopView\";\nimport { useWeatherInfo } from \"../hooks/useWeatherInfo\";\n// import { Temp } from \"../types/TempEnums\";\n\nconst Temp = {\n  Fahrenheit: \"imperial\",\n  Celsius: \"metric\",\n};\n\nexport const WeatherInfo = () => {\n  const toast = useToast();\n  const [coord, setCoord] = useState();\n  const [tempUnit, setTempUnit] = useState(Temp.Celsius);\n  const { data, isLoading, isFetching, isError, error, refetch } =\n    useWeatherInfo(coord, tempUnit);\n\n  useEffect(() => {\n    const temperature_unit = localStorage.getItem(\"temperature_unit\");\n    if (temperature_unit) {\n      setTempUnit(temperature_unit);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setCoord({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        });\n      });\n    } else {\n      toast({\n        title: \"Location service\",\n        description: \"Please enable browser location\",\n        status: \"warning\",\n        duration: 9000,\n        isClosable: true,\n      });\n    }\n  }, [toast]);\n\n  useEffect(() => {\n    localStorage.setItem(\"temperature_unit\", tempUnit);\n  }, [tempUnit]);\n\n  useEffect(() => {\n    const errorObj = error;\n    if (isError) {\n      toast({\n        title: \"Network error\",\n        description: errorObj?.error,\n        status: \"error\",\n        duration: 9000,\n        isClosable: true,\n        position: \"top\",\n      });\n    }\n  }, [isError, error, toast]);\n  return (\n    <Flex direction=\"column\" background=\"#31255a\" h=\"100vh\">\n      <Flex\n        direction=\"column\"\n        background=\"linear-gradient(120deg,rgba(255,255,255,0.3),transparent)\"\n        backdropFilter=\"blur(30px)\"\n      ></Flex>\n      {isLoading && coord !== undefined ? (\n        <AppLoader />\n      ) : (\n        <>\n          {isFetching && <AppLoader />}\n          <RadioGroup onChange={setTempUnit} value={tempUnit} m=\"4\" mb=\"0\">\n            <Stack\n              direction=\"row\"\n              justifyContent={[\"space-between\", \"flex-start\"]}\n            >\n              <Radio colorScheme=\"green\" value={Temp.Celsius}>\n                <Text color=\"white\" fontSize=\"sm\">\n                  Celsius\n                </Text>\n              </Radio>\n              <Radio colorScheme=\"green\" value={Temp.Fahrenheit}>\n                <Text color=\"white\" fontSize=\"sm\">\n                  Fahrenheit\n                </Text>\n              </Radio>\n            </Stack>\n          </RadioGroup>\n          <Top data={data?.city} />\n          <Bottom data={data?.list} reload={() => refetch()} />\n        </>\n      )}\n    </Flex>\n  );\n};\n","import { useQuery } from \"react-query\";\nimport { getWeatherInfo } from \"../utils/api\";\n\nexport const useWeatherInfo = (coord, unit) => {\n  return useQuery(\n    [\"weatherInfo\", coord, unit],\n    () => coord && getWeatherInfo(coord, unit),\n    {\n      enabled: !!coord && !!unit,\n    }\n  );\n};\n","import { css } from \"@emotion/react\";\n\nexport const GlobalStyles = css`\n  .next,\n  .prev {\n    top: calc(50% - 20px);\n    position: absolute;\n    background: white;\n    border-radius: 30px;\n    width: 40px;\n    height: 40px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    user-select: none;\n    cursor: pointer;\n    font-weight: bold;\n    font-size: 18px;\n    z-index: 2;\n  }\n\n  .next {\n    right: 10px;\n  }\n\n  .prev {\n    left: 10px;\n    transform: scale(-1);\n  }\n\n  .rec-arrow{\n    border-radius: 50%;\n  }\n`;\n","import { extendTheme } from \"@chakra-ui/react\";\n\nconst theme = extendTheme({\n  colors: {\n  },\n  fonts: {\n    body: \"Montserrat\",\n    heading: \"Montserrat\",\n  },\n  components: {\n   \n  },\n});\n\nexport default theme;\n","\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { WeatherInfo } from './pages/WeatherInfoPage';\nimport { Global } from \"@emotion/react\";\nimport { GlobalStyles } from \"./styles/GlobalStyles\";\nimport theme from \"./styles/theme\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ChakraProvider theme={theme}>\n        <Global styles={GlobalStyles} />\n        <WeatherInfo />\n      </ChakraProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { ColorModeScript } from \"@chakra-ui/react\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"@fontsource/montserrat\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}